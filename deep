html:

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Relatorio de Clientes</title>
    <link rel="stylesheet" href="mov.css">
    <script src="mov.js"></script>
    </head>
    <body>
        <header>
             <img class="logo" src="imagens/logoo.png">
             <img class="logo2" src="imagens/ccmts.jfif">
             <img class="logo3" src="imagens/parana.png">
        </header>
        <nav></nav>
        <main>
            <section>
            <div class="form-container">
                <h1>Relatorio de Clientes</h1>
                <form id="search-form">
                    <div class="input-group">
                        <label for="search">Pesquisar Cliente:</label>
                        <input type="text" id="search" placeholder="Digite o nome ou ID do cliente" autocomplete="off">
                    </div>
                </form>
            </div>

                <div class="container_botoes">
                    <button type="button" class="botao" onclick="Pesquisar()">Pesquisar</button>
                    <button class="botao2" onclick="voltarpagina()">Voltar</button>
                    <button class="botao3" onclick="alterarfuncionario()">Alterar</button>
                    <button class="botao4" onclick="consultarFuncionario()">Consultar</button>
                    <button class="botao5" onclick="limpaFormulario()">Limpar</button>
                </div>
                
            <div id="result-container" class="resposta-container" style="display: none;">
                <!-- Os resultados serão exibidos aqui -->
            </div>
        </section>
    </main>

    <footer>
        <img class="logo4" src="imagens/gimc2.png">
         <p>2025 - Todos os direitos reservados</p>
    </footer>
        
</body>
</html>

js:

async function Pesquisar() {
    const searchTerm = document.getElementById('search').value.trim();

    if (!searchTerm) {
        alert('Por favor, digite um código ou nome para pesquisar');
        return;
    }

    try {
        // Primeiro busca os clientes
        const responseClientes = await fetch(`/clientes?cpf=${encodeURIComponent(searchTerm)}`);
        const clientes = await responseClientes.json();

        // Depois busca a frequência
        const responseFrequencia = await fetch(`/frequencia?codigo=${encodeURIComponent(searchTerm)}`);
        const frequencias = await responseFrequencia.json();

        const resultContainer = document.getElementById('result-container');
        resultContainer.style.display = 'block';
        resultContainer.innerHTML = '';

        if (clientes.length === 0) {
            resultContainer.innerHTML = '<div class="caixa-resposta"><p>Nenhum cliente encontrado.</p></div>';
            return;
        }

        // Para cada cliente encontrado, mostra as informações
        clientes.forEach(clientes => {
            // Encontra a frequência correspondente a este cliente
            const frequenciaCliente = frequencias.find(freq => freq.codigo === clientes.codigo);

            const caixa = document.createElement('div');
            caixa.className = 'caixa-resposta';

            caixa.innerHTML = `
                <h3>${clientes.nome} (Código: ${clientes.codigo})</h3>
                <div class="cliente-info">
                    <div class="info-group">
                        <span class="info-label">CPF:</span> ${clientes.cpf || 'N/A'}
                    </div>
                    <div class="info-group">
                        <span class="info-label">Idade:</span> ${clientes.idade || 'N/A'}
                    </div>
                    <div class="info-group">
                        <span class="info-label">Telefone:</span> ${clientes.telefone || 'N/A'}
                    </div>
                    <div class="info-group">
                        <span class="info-label">Email:</span> ${clientes.email || 'N/A'}
                    </div>
                    <div class="info-group">
                        <span class="info-label">Emergência:</span> ${clientes.emergencia || 'N/A'}
                    </div>
                    <div class="info-group">
                        <span class="info-label">Endereço:</span> ${clientes.endereco || 'N/A'}
                    </div>

                    <div class="info-group">
                        <span class="info-label">Treinos:</span> ${frequenciaCliente ? frequenciaCliente.treinos : 'N/A'}
                    </div>
                    <div class="info-group">
                        <span class="info-label">Faltas:</span> ${frequenciaCliente ? frequenciaCliente.faltas : 'N/A'}
                    </div>
                </div>
            `;

            resultContainer.appendChild(caixa);
        });

    } catch (error) {
        console.error('Erro na pesquisa:', error);
        alert('Erro ao realizar a pesquisa. Verifique a conexão.');
    }
}

// Funções dos botões (simples)
function incluirfuncionario(event) {
    event.preventDefault();
    alert('Redirecionando para cadastro de funcionário...');
    window.location.href = 'funcionario.html';
}

function voltarpagina() {
    window.location.href = 'escolha.html';
}

function alterarfuncionario() {
    alert('Redirecionando para alteração de funcionário...');
    window.location.href = 'funcionario.html';
}

function consultarFuncionario() {
    alert('Redirecionando para consulta de funcionário...');
    window.location.href = 'funcionario.html';
}

function limpaFormulario() {
    document.getElementById('search').value = '';
    const resultContainer = document.getElementById('result-container');
    resultContainer.style.display = 'none';
    resultContainer.innerHTML = '';
}

// Adicionar evento de enter no campo de pesquisa
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('search');
    if (searchInput) {
        searchInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                Pesquisar();
            }
        });
    }
});

index.js:

db.run(`
    CREATE TABLE IF NOT EXISTS movimento (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        codigo VARCHAR(10) NOT NULL,
        nome VARCHAR(100) NOT NULL,
        mes VARCHAR(7) NOT NULL,
        treinos INTEGER DEFAULT 0,
        faltas INTEGER DEFAULT 0,
        valor DECIMAL(10,2) DEFAULT 0,
        pago VARCHAR(3) DEFAULT 'Não'
    )
    `);



///////////////////////////// Rotas para Movimento /////////////////////////////
///////////////////////////// Rotas para Movimento /////////////////////////////
///////////////////////////// Rotas para Movimento /////////////////////////////

// Cadastrar movimento
app.post("/movimento", (req, res) => {
    const { codigo, nome, mes, treinos, faltas, valor, pago } = req.body;

    if (!codigo || !nome || !mes) {
        return res.status(400).send("Código, nome e mês são obrigatórios.");
    }

    const query = `INSERT INTO movimento (codigo, nome, mes, treinos, faltas, valor, pago) VALUES (?, ?, ?, ?, ?, ?, ?)`;
    db.run(query, [codigo, nome, mes, treinos, faltas, valor, pago], function (err) {
        if (err) {
            return res.status(500).send("Erro ao cadastrar movimento.");
        }
        res.status(201).send({
            id: this.lastID,
            message: "Movimento cadastrado com sucesso.",
        });
    });
});

// Listar movimento - busca por código, nome ou mês
app.get("/movimento", (req, res) => {
    const search = req.query.search || "";
    const mes = req.query.mes || "";

    let query = `SELECT * FROM movimento WHERE 1=1`;
    let params = [];

    if (search) {
        query += ` AND (codigo LIKE ? OR nome LIKE ?)`;
        params.push(`%${search}%`, `%${search}%`);
    }

    if (mes) {
        query += ` AND mes = ?`;
        params.push(mes);
    }

    query += ` ORDER BY nome`;

    db.all(query, params, (err, rows) => {
        if (err) {
            console.error(err);
            return res.status(500).json({ message: "Erro ao buscar movimento." });
        }
        res.json(rows);
    });
});

// Atualizar movimento
app.put("/movimento/codigo/:codigo/mes/:mes", (req, res) => {
    const { codigo, mes } = req.params;
    const { treinos, faltas, valor, pago } = req.body;

    const query = `UPDATE movimento SET treinos = ?, faltas = ?, valor = ?, pago = ? WHERE codigo = ? AND mes = ?`;
    db.run(query, [treinos, faltas, valor, pago, codigo, mes], function (err) {
        if (err) {
            return res.status(500).send("Erro ao atualizar movimento.");
        }
        if (this.changes === 0) {
            return res.status(404).send("Movimento não encontrado.");
        }
        res.send("Movimento atualizado com sucesso.");
    });
});

// Buscar movimento completo (junção com clientes)
app.get("/movimento/completo", (req, res) => {
    const search = req.query.search || "";

    if (!search) {
        return res.status(400).send("Termo de pesquisa é obrigatório.");
    }

    const query = `
        SELECT 
            c.codigo, 
            c.nome, 
            c.idade, 
            c.telefone, 
            c.email,
            c.cpf,
            c.endereco,
            m.mes,
            m.treinos,
            m.faltas,
            m.valor,
            m.pago
        FROM clientes
        LEFT JOIN movimento m ON c.codigo = m.codigo
        WHERE c.codigo LIKE ? OR c.nome LIKE ? OR c.cpf LIKE ?
        ORDER BY c.nome
    `;

esta mostrando que nao tem cliente encontrado, nao esta puxando as informações, me mostre oq posso mudar, em paginas separadas por favor, html, js e index.js
