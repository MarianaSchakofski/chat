db.run(`
        CREATE TABLE IF NOT EXISTS movimento (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            codigo VARCHAR(10) NOT NULL,
            horarioE VARCHAR(100) NOT NULL,
            horarioS VARCHAR(100),
            data DATE DEFAULT CURRENT_DATE
        )
    `);





// ==============================================
// ROTAS PARA MOVIMENTO DO MÊS
// ==============================================


// Buscar cliente por código
app.get("/clientes/codigo/:codigo", (req, res) => {
    const { codigo } = req.params;
    const query = `SELECT * FROM clientes WHERE codigo = ?`;

    db.get(query, [codigo], (err, row) => {
        if (err) {
            return res.status(500).json({ message: "Erro ao buscar cliente." });
        }
        if (!row) {
            return res.status(404).json({ message: "Cliente não encontrado." });
        }
        res.json(row);
    });
});

// Buscar movimentos do mês
app.get("/movimento/mes", (req, res) => {
    const { codigo, mes, ano } = req.query;

    if (!codigo || !mes || !ano) {
        return res.status(400).json({ message: "Código, mês e ano são obrigatórios." });
    }

    const dataInicio = `${ano}-${mes.padStart(2, '0')}-01`;
    const ultimoDia = new Date(ano, mes, 0).getDate();
    const dataFim = `${ano}-${mes.padStart(2, '0')}-${ultimoDia}`;

    const query = `
        SELECT * FROM movimento 
        WHERE codigo = ? 
        AND date(data) BETWEEN ? AND ?
        ORDER BY data, horarioE
    `;

    db.all(query, [codigo, dataInicio, dataFim], (err, rows) => {
        if (err) {
            return res.status(500).json({ message: "Erro ao buscar movimentos." });
        }
        res.json(rows);
    });
});
