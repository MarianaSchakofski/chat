<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cadastro de Clientes</title>
    <link rel="stylesheet" href="cadastro.css">
    <script src="cadastro.js"></script>

</head>
<body>
  <header>
    <img class="logo" src="imagens/logoo.png">
     <img class="logo2" src="imagens/ccmts.jfif">
     <img class="logo3" src="imagens/parana.png">
  </header>
<nav></nav>
<main>

<div id="main-container">
    <h1>Cadastro de Cliente</h1>
    <form class="Cadastro" id="formCliente">
        <div class="full-box">
            <label for="codigo">Código</label>
            <input type="text" id="codigo" name=codigo placeholder="Digite o Código" />
        </div>
        <div class="full-box">
            <label for="nome">Nome:</label>
            <input type="text" id="nome" name="nome" placeholder="Digite o nome completo" required>
        </div>
        <div class="half-box">
            <label for="idade">Idade:</label>
            <input type="number" id="idade" name="idade" placeholder="Digite a idade" required>
        </div>
        <div class="half-box">
            <label for="telefone">Telefone:</label>
            <input type="text" id="telefone" name="telefone" placeholder="Digite o telefone" required>
        </div>
        <div class="half-box">
            <label for="emergencia">nº de emergência:</label>
            <input type="text" id="emergencia" name="emergencia" placeholder="Digite o nº de emergência" required>
        </div>
        <div class="half-box">
            <label for="endereco">Endereço:</label>
            <input type="text" id="endereco" name="endereco" placeholder="Digite o endereço" required>
        </div>
        <div class="half-box">
            <label for="email">E-mail:</label>
            <input type="email" id="email" name="email" placeholder="Digite o e-mail" required>
        </div>
        <div class="half-box">
            <label for="cpf">CPF:</label>
            <input type="text" id="cpf" maxlength="11" placeholder="Digite o CPF" />
            </div>
     </form>
    <div class="container_botoes">
            <button class="botao1" onclick="incluirCliente(event)">Incluir</button>
             <button class="botao2" onclick="voltarpagina()">Voltar</button>
            <button class="botao3" onclick="alterarCliente()">Alterar</button>
            <button class="botao4" onclick="consultarClientes()">Consultar</button>
            <button class="botao5" onclick="limpaFormulario()">Limpar</button>
         </div>
      </section>

    <table border="1">
        <thead>
            <tr>
                <th>Codigo</th>
                <th>Nome</th>
                <th>Idade</th>
                <th>Telefone</th>
                <th>Emergência</th>
                <th>Endereço</th>
                <th>Email</th>
                <th>CPF</th>   
            </tr>
        </thead>
        <tbody id="tabela-clientes">
            <!-- Linhas serão preenchidas pelo JavaScript -->
        </tbody>
    </table>

 </div>
      </section>
    </main>


<footer>
    <img class="logo4" src="imagens/gimc2.png">
     <p>2025 - Todos os direitos reservados</p>
</footer>
</body>
</html>

async function incluirCliente(event) {
    event.preventDefault();



    const cliente = {
        codigo: document.getElementById("codigo").value,
        nome: document.getElementById("nome").value,
        idade: document.getElementById("idade").value,
        telefone: document.getElementById("telefone").value,
        emergencia: document.getElementById("emergencia").value,
        endereco: document.getElementById("endereco").value,
        email: document.getElementById("email").value,
        cpf: document.getElementById("cpf").value
    };

    try {
        const response = await fetch('/clientes', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(cliente)
        });

        const result = await response.json();
        if (response.ok) {
            alert("Cliente cadastrado com sucesso!");
            document.getElementById("formCliente").reset();
        } else {
            alert(`Erro: ${result.message}`);
        }
    } catch (err) {
        console.error("Erro na solicitação:", err);
        alert("Erro ao cadastrar cliente.");
    }
}





// Função para listar todos os clientes ou buscar clientes por CPF
async function consultarClientes() {
    const codigo = document.getElementById('codigo').value.trim();  // Pega o valor do CPF digitado no input

    let url = '/clientes';  // URL padrão para todos os clientes

    if (codigo) {
        // Se CPF foi digitado, adiciona o parâmetro de consulta
        url += `?codigo=${codigo}`;
    }

    try {
        const response = await fetch(url);
        const clientes = await response.json();

        const tabela = document.getElementById('tabela-clientes');
        tabela.innerHTML = ''; // Limpa a tabela antes de preencher

        if (clientes.length === 0) {
            // Caso não encontre clientes, exibe uma mensagem
            tabela.innerHTML = '<tr><td colspan="6">Nenhum cliente encontrado.</td></tr>';
        } else {
            clientes.forEach(cliente => {
                const linha = document.createElement('tr');
                linha.innerHTML = `
                    <td>${cliente.codigo}</td>
                    <td>${cliente.nome}</td>
                    <td>${cliente.idade}</td>
                    <td>${cliente.telefone}</td>
                    <td>${cliente.emergencia}</td>
                    <td>${cliente.endereco}</td>
                    <td>${cliente.email}</td>
                    <td>${cliente.cpf}</td>
                `;
                tabela.appendChild(linha);
            });
        }
    } catch (error) {
        console.error('Erro ao listar clientes:', error);
    }
}
// Função para atualizar as informações do cliente
async function alterarCliente() {
    const codigo = document.getElementById('codigo').value.trim();
    const nome = document.getElementById('nome').value.trim();
    const idade = document.getElementById('idade').value.trim();
    const telefone = document.getElementById('telefone').value.trim();
    const emergencia = document.getElementById('emergencia').value.trim();
    const endereco = document.getElementById('endereco').value.trim();
    const email = document.getElementById('email').value.trim();
    const cpf = document.getElementById('cpf').value.trim();

    // Validação básica
    if (!codigo || !nome || !cpf) {
        alert('Código, nome e CPF são obrigatórios para alteração!');
        return;
    }

    const clienteAtualizado = {
        codigo,
        nome,
        idade, 
        telefone,
        emergencia,
        endereco,
        email,
        cpf
    };

    try {
        const response = await fetch(`/clientes/codigo/${codigo}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(clienteAtualizado)
        });

        if (response.ok) {
            alert('Cliente atualizado com sucesso!');
            // Atualiza a tabela após alteração
            consultarClientes();
        } else {
            const errorMessage = await response.text();
            alert('Erro ao atualizar cliente: ' + errorMessage);
        }
    } catch (error) {
        console.error('Erro ao atualizar cliente:', error);
        alert('Erro ao atualizar cliente. Verifique a conexão.');
    }
}
async function limpaFormulario() {
    document.getElementById('codigo').value ='';
    document.getElementById('nome').value = '';
    document.getElementById('idade').value = '';
    document.getElementById('telefone').value = '';
    document.getElementById('emergencia').value ='';
    document.getElementById('endereco').value = '';
    document.getElementById('email').value = '';
    document.getElementById('cpf').value = '';
}

// Função para voltar
function voltarpagina() {
    window.location.href = 'escolha.html';
}


app.post("/clientes", (req, res) => {
    const { codigo, nome, idade, telefone, emergencia, endereco, email, cpf } =
        req.body;

    if (!nome || !codigo) {
        return res.status(400).send("Nome e CPF são obrigatórios.");
    }

    const query = `INSERT INTO clientes (codigo, nome, idade, telefone, emergencia, endereco, email, cpf) VALUES (?, ?, ?, ?, ?, ?, ?, ?)`;
    db.run(
        query,
        [codigo, nome, idade, telefone, emergencia, endereco, email, cpf],
        function (err) {
            if (err) {
                return res.status(500).send("Erro ao cadastrar cliente.");
            }
            res.status(201).send({
                id: this.lastID,
                message: "Cliente cadastrado com sucesso.",
            });
        },
    );
});

// Listar clientes
// Endpoint para listar todos os clientes ou buscar por CPF
app.get("/clientes", (req, res) => {
    const codigo = req.query.cpf || ""; // Recebe o CPF da query string (se houver)

    if (codigo) {
        // Se CPF foi passado, busca clientes que possuam esse CPF ou parte dele
        const query = `SELECT * FROM clientes WHERE codigo LIKE ?`;

        db.all(query, [`%${codigo}%`], (err, rows) => {
            if (err) {
                console.error(err);
                return res
                    .status(500)
                    .json({ message: "Erro ao buscar clientes." });
            }
            res.json(rows); // Retorna os clientes encontrados ou um array vazio
        });
    } else {
        // Se CPF não foi passado, retorna todos os clientes
        const query = `SELECT * FROM clientes`;

        db.all(query, (err, rows) => {
            if (err) {
                console.error(err);
                return res
                    .status(500)
                    .json({ message: "Erro ao buscar clientes." });
            }
            res.json(rows); // Retorna todos os clientes
        });
    }
});

// Atualizar cliente
app.put("/clientes/codigo/:codigo", (req, res) => {
    const { codigo } = req.params;
    const { nome, idade, telefone, emergencia, endereco, email, cpf } = req.body;

    if (!codigo || !nome) {
        return res.status(400).send("Código e nome são obrigatórios.");
    }

    const query = `UPDATE clientes SET nome = ?, idade = ?, telefone = ?, emergencia = ?, endereco = ?, email = ?, cpf = ?, WHERE codigo = ?`;
    db.run(query, [codigo, nome, idade, telefone, emergencia, endereco, email, cpf], function (err) {
        if (err) {
            console.error(err);
            return res.status(500).send("Erro ao atualizar cliente.");
        }
        if (this.changes === 0) {
            return res.status(404).send("Cliente não encontrado.");
        }
        res.send("Cliente atualizado com sucesso.");
    });
});
